The 'add_integer' function
============================

This function adds two integers, a and b.
It returns an integer which is a sum of the two integers.

If either of the integers are floats, it is first casted into an int.

Otherwise, a `TypeError` exception with the message `a must be an integer` or
`b must be an integer`.
-------------------------

Importing the function,

    >>> add_integer = __import__('0-add_integer').add_integer

CASE 1: One/Two Integer Inputs
-----------------------

    >>> add_integer(1)
    99

    >>> add_integer(1, 2)
    3

    >>> add_integer(1, 0)
    1

    >>> add_integer(6, -2)
    4

CASE 2: One/Two Float Inputs
-----------------------

    >>> add_integer(1.0, 2)
    3

    >>> add_integer(1, 0.8)
    1

    >>> add_integer(6.3, -2.1)
    4

Casting the float into an integer discards the decimal part.

CASE 3: Unexpected Inputs
------------------------
Raises an exception when anything aside ints and floats are passed to it.
This includes strings, lists, dicts, tuples, etc.

    >>> add_integer(1, "am")
    Traceback (most recent call last):
    ...
    TypeError: b must be an integer

    >>> add_integer([], 3)
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

    >>> add_integer(1, (2, 5))
    Traceback (most recent call last):
    ...
    TypeError: b must be an integer

    >>> add_integer({1}, 6)
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

    >>> add_integer(1, None)
    Traceback (most recent call last):
    ...
    TypeError: b must be an integer

    >>> add_integer(1, float("nan"))
    Traceback (most recent call last):
    ...
    ValueError: cannot convert float NaN to integer

    >>> add_integer(1, float("inf"))
    Traceback (most recent call last):
    ...
    OverflowError: cannot convert float infinity to integer

    >>> add_integer()
    Traceback (most recent call last):
    ...
    TypeError: add_integer() missing 1 required positional argument: 'a'
